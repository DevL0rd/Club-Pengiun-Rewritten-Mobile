console['ignored'] = function(m) {};
var fa = ['forEach', 'closeHint', 'querySelectorAll', '.friends__item', '.friends__search', 'length', 'listOffset', 'friends__item--online', 'friends__item-name', 'friends__item-avatar', 'add', 'dataset', '%swid%', 'avatarUrl', 'searchResults', 'swid', 'setListItem', 'context', 'stack', 'indexOf', 'Invalid\x20API\x20Environment', 'getElementsByClassName', 'room', 'splice', 'updateRoomList', 'includes', 'game__base\x20game__base--loaded', 'find', 'handleIgnoredClick', 'Show\x20online\x20hint\x20for\x20user', 'style', 'hint--show', 'getBoundingClientRect', 'STATE_BUDDIES', 'content__friends--show', 'classList', 'remove', 'handleAirtowerDisconnect', 'disconnect', 'airtower\x20disconnect\x20was\x20called', 'showFriends', 'setRoomList', 'isListShowing', 'sendAddIgnore', 'updateFriendRequest', 'value', 'writable', 'ignoreList', 'friendRequest', 'addIgnore', 'friendRequests', 'imgCache', 'myPenguin', 'name', 'titles', 'Users\x20in\x20Room', 'friendsContainer', 'getElementById', 'protocolTypes', 'cprewritten.social.IgnoreList', 'friend', 'lookupType', 'removeFriend', 'socket', 'handleNetworkData', 'bind', 'websocket\x20connected', 'sendData', 'client_desktop_ws', 'authenticate', 'isPenguinIgnored', 'findIndexBy', 'isPenguinMyFriend', 'verifyAPIContext', 'findBy', 'create', 'encode', 'shouldReconnect', 'received\x20auth\x20packet\x20back\x20from\x20server,\x20updating\x20reconnection\x20key\x20from\x20', 'concat', 'friendsList', 'friends', 'src', 'replace', 'updateList', 'protocol', 'handleFriendRequest', 'log', 'showOnlineHint', 'removeFriend()', 'push', 'removeIgnore()', 'world', 'removeIgnore', 'acceptRequest', 'addFriend', 'querySelector', 'addEventListener', 'tagName', 'parentElement', 'toLowerCase', 'contextmenu', 'preventDefault', 'keyup', '.friends__button--my', 'mouseenter', 'changeList', 'Show\x20Online', 'click'];
(function(c, d) {
    var e = function(f) {
        while (--f) {
            c['push'](c['shift']());
        }
    };
    e(++d);
}(fa, 0x1e1));
var fb = function(c, d) {
    c = c - 0x0;
    var e = fa[c];
    return e;
};
'use strict';

function _classCallCheck(c, d) {
    if (!(c instanceof d)) {
        throw new TypeError('Cannot\x20call\x20a\x20class\x20as\x20a\x20function');
    }
}

function _defineProperties(e, f) {
    for (var g = 0x0; g < f['length']; g++) {
        var h = f[g];
        h['enumerable'] = h['enumerable'] || ![];
        h['configurable'] = !![];
        if (fb('0x0') in h) h[fb('0x1')] = !![];
        Object['defineProperty'](e, h['key'], h);
    }
}

function _createClass(i, j, k) {
    if (j) _defineProperties(i['prototype'], j);
    if (k) _defineProperties(i, k);
    return i;
}
var friendAPI = {};
var friends = function() {
    var l = function() {
        function l() {
            _classCallCheck(this, l);
            console['ignored']('Friends');
            this['STATE_BUDDIES'] = 'buddies';
            this['STATE_ROOM'] = 'room';
            this['STATE_IGNORED'] = 'ignored';
            this['protocolTypes'] = {};
            this['protocol'] = {};
            this['protocol']['authenticate'] = 0x1;
            this['protocol']['friendsList'] = 0x2;
            this['protocol'][fb('0x2')] = 0x3;
            this['protocol'][fb('0x3')] = 0x4;
            this['protocol']['addFriend'] = 0x5;
            this['protocol']['removeFriend'] = 0x6;
            this['protocol'][fb('0x4')] = 0x7;
            this['protocol']['removeIgnore'] = 0x8;
            this['protocol']['updateWorld'] = 0x9;
            this['protocol']['error'] = 0xa;
            this['PROTOCOL_VERSION'] = 0x2;
            this['friends'] = [];
            this[fb('0x5')] = [];
            this['ignored'] = [];
            this['room'] = [];
            this['listOffset'] = 0x0;
            this[fb('0x6')] = [];
            this['apiContext'];
            this['shouldReconnect'] = ![];
            this['tempHidden'] = ![];
            this[fb('0x7')] = {};
            this[fb('0x7')]['id'] = -0x1;
            this[fb('0x7')][fb('0x8')] = '';
            this[fb('0x7')]['swid'] = '';
            this[fb('0x7')]['key'] = '';
            this[fb('0x7')]['world'] = 0x1;
            this['searchResults'] = undefined;
            this['currentList'] = this['STATE_BUDDIES'];
            this[fb('0x9')] = {};
            this[fb('0x9')]['buddies'] = 'Your\x20Friends';
            this[fb('0x9')]['room'] = fb('0xa');
            this[fb('0x9')]['ignored'] = 'Ignore\x20List';
            this['avatarUrl'] = 'https://avatar.cprewritten.net/paperdoll.php?swid=%swid%&size=88';
            this[fb('0xb')] = document['querySelector']('.content__friends');
            this['game'] = document[fb('0xc')]('game');
            this['hint'] = document['querySelector']('.hint');
            this['setupDrag']();
            this['setupButtons']();
            this['setupInput']();
            this['setupList']();
            this['setupNetwork']();
            this['closeFriends']();
        }
        _createClass(l, [{
            'key': 'setupNetwork',
            'value': function setupNetwork() {
                var n = this;
                protobuf['load']('https://ss.cprewritten.net:8443/social.protocol.json', function(o, p) {
                    if (o) throw o;
                    n[fb('0xd')]['wrapper'] = p['lookupType']('cprewritten.social.PacketWrapper');
                    n[fb('0xd')]['authenticate'] = p['lookupType']('cprewritten.social.Authenticate');
                    n['protocolTypes']['friendsList'] = p['lookupType']('cprewritten.social.FriendsList');
                    n['protocolTypes']['updateWorld'] = p['lookupType']('cprewritten.social.UpdateWorld');
                    n['protocolTypes']['ignoreList'] = p['lookupType'](fb('0xe'));
                    n[fb('0xd')]['friendRequest'] = p['lookupType']('cprewritten.social.FriendRequest');
                    n['protocolTypes']['addFriend'] = p['lookupType']('cprewritten.social.AddFriend');
                    n['protocolTypes'][fb('0xf')] = p[fb('0x10')]('cprewritten.social.Friend');
                    n['protocolTypes'][fb('0x11')] = p['lookupType']('cprewritten.social.RemoveFriend');
                    n['protocolTypes']['addIgnore'] = p['lookupType']('cprewritten.social.AddIgnore');
                    n['protocolTypes']['removeIgnore'] = p['lookupType']('cprewritten.social.RemoveIgnore');
                    n['protocolTypes']['error'] = p['lookupType']('cprewritten.social.Error');
                    n['connect']();
                });
            }
        }, {
            'key': 'connect',
            'value': function connect(q, r, s) {
                var t = this;
                this['socket'] = new WebSocket('wss://ss.cprewritten.net:8443/');
                this[fb('0x12')]['binaryType'] = 'arraybuffer';
                this[fb('0x12')]['onopen'] = function(u) {
                    t['handleNetworkConnected'](u);
                };
                this['socket']['onclose'] = this['handleNetworkDisconnect']['bind'](this);
                this[fb('0x12')]['onerror'] = this['handleNetworkDisconnect']['bind'](this);
                this['socket']['onmessage'] = this[fb('0x13')][fb('0x14')](this);
            }
        }, {
            'key': 'handleNetworkConnected',
            'value': function handleNetworkConnected(v) {
                console['ignored'](fb('0x15'), v);
                if (this['shouldReconnect']) {
                    this['shouldReconnect'] = ![];
                    this[fb('0x16')]('authenticate', {
                        'id': this['myPenguin']['id'],
                        'key': this['myPenguin']['key'],
                        'agent': fb('0x17'),
                        'protocol': this['PROTOCOL_VERSION']
                    });
                }
            }
        }, {
            'key': 'sendAuthenticate',
            'value': function sendAuthenticate(w) {
                console['ignored'](w);
                this['setAPIContext']();
                this[fb('0x7')]['id'] = w[0x0];
                this[fb('0x7')]['key'] = w[0x1];
                this['myPenguin']['swid'] = w[0x2];
                this[fb('0x16')](fb('0x18'), {
                    'id': this['myPenguin']['id'],
                    'key': this['myPenguin']['key'],
                    'agent': 'client_desktop_ws',
                    'protocol': this['PROTOCOL_VERSION']
                });
            }
        }, {
            'key': fb('0x19'),
            'value': function isPenguinIgnored(x) {
                this['verifyAPIContext']();
                var y = this[fb('0x1a')]('ignored', 'id', x);
                return y !== -0x1;
            }
        }, {
            'key': fb('0x1b'),
            'value': function isPenguinMyFriend(z) {
                this['verifyAPIContext']();
                var A = this['findIndexBy']('friends', 'id', z);
                return A !== -0x1;
            }
        }, {
            'key': 'isFriendOnline',
            'value': function isFriendOnline(B) {
                this[fb('0x1c')]();
                var C = this['findBy']('friends', 'id', B);
                return C['world'] == this['myPenguin']['world'];
            }
        }, {
            'key': 'getFriendName',
            'value': function getFriendName(D) {
                this['verifyAPIContext']();
                var E = this[fb('0x1d')]('friends', 'id', D);
                if (E == undefined) {
                    E = this['findBy']('room', 'id', D);
                }
                if (E == undefined) {
                    E = this['findBy']('ignored', 'id', D);
                }
                return E['name'];
            }
        }, {
            'key': 'sendData',
            'value': function sendData(F, G) {
                var H = {};
                H['id'] = this['protocol'][F];
                H[F] = this['protocolTypes'][F]['create'](G);
                var I = this[fb('0xd')]['wrapper'][fb('0x1e')](H);
                this[fb('0x12')]['send'](this['protocolTypes']['wrapper'][fb('0x1f')](I)['finish']());
            }
        }, {
            'key': 'handleNetworkDisconnect',
            'value': function handleNetworkDisconnect(J) {
                if (this[fb('0x20')]) {
                    clearTimeout(this['reconnectTimeout']);
                    this['reconnectTimeout'] = setTimeout(this['connect'][fb('0x14')](this), 0x3e8);
                }
                console['ignored']('websocket\x20disconnected\x20reason\x20=\x20', J);
            }
        }, {
            'key': 'handleNetworkData',
            'value': function handleNetworkData(K, L) {
                var M = new Uint8Array(K['data']);
                var N = this[fb('0xd')]['wrapper']['decode'](M);
                console['ignored']('received\x20data\x20with\x20identifier\x20', N['id']);
                switch (N['id']) {
                    case this['protocol']['authenticate']:
                        var O = N['authenticate']['key'];
                        console['ignored'](fb('0x21')[fb('0x22')](this['myPenguin']['key'], '\x20to\x20')['concat'](O));
                        this['myPenguin']['key'] = O;
                        this['shouldReconnect'] = !![];
                        break;
                    case this['protocol']['friendsList']:
                        console['ignored']('received\x20friends\x20list\x20packet');
                        var P = N[fb('0x23')]['friend'];
                        this['friends'] = P;
                        for (var Q in this[fb('0x24')]) {
                            this['imgCache'][this['friends'][Q]['swid']] = new Image();
                            this['imgCache'][this['friends'][Q]['swid']][fb('0x25')] = this['avatarUrl'][fb('0x26')]('%swid%', this['friends'][Q]['swid']);
                        }
                        this['imgCache'] = {};
                        this[fb('0x27')]();
                        break;
                    case this['protocol']['ignoreList']:
                        console['ignored']('received\x20ignored\x20list\x20packet');
                        var R = N['ignoreList']['penguin'];
                        this['ignored'] = R;
                        break;
                    case this[fb('0x28')]['friendRequest']:
                        var S = N['friendRequest'];
                        this[fb('0x29')]({
                            'id': S['id'],
                            'name': S['name']
                        });
                        console['ignored']('received\x20friend\x20request');
                        console[fb('0x2a')](S);
                        break;
                    case this[fb('0x28')]['addFriend']:
                        console['ignored']('addFriend()', N['addFriend']['friend']);
                        this['friends']['push'](N['addFriend'][fb('0xf')]);
                        this[fb('0x2b')](N['addFriend']['friend']['id']);
                        this['updateList']();
                        break;
                    case this['protocol']['removeFriend']:
                        console['ignored'](fb('0x2c'), N['removeFriend']['friend']);
                        var T = N['removeFriend'][fb('0xf')]['id'];
                        var U = this['findIndexBy']('friends', 'id', T);
                        if (U !== -0x1) {
                            this['friends']['splice'](U, 0x1);
                            this[fb('0x27')]();
                        }
                        break;
                    case this[fb('0x28')]['addIgnore']:
                        {
                            console['ignored']('addIgnore()', N[fb('0x4')]);
                            var V = N[fb('0x4')]['penguin'];this['ignored'][fb('0x2d')](V);this['updateList']();
                        }
                        break;
                    case this['protocol']['removeIgnore']:
                        {
                            console['ignored'](fb('0x2e'), N['removeIgnore']);
                            var W = N['removeIgnore']['penguin'];
                            var X = this['findIndexBy']('ignored', 'id', W['id']);
                            if (X !== -0x1) {
                                this['ignored']['splice'](X, 0x1);
                                this['updateList']();
                            }
                        }
                        break;
                    case this['protocol']['updateWorld']:
                        {
                            console['ignored']('updateWorld()', N['updateWorld']);
                            var Y = N['updateWorld']['friend'];
                            var Z = N['updateWorld'][fb('0x2f')];
                            if (Y == this['myPenguin']['id']) {
                                this['myPenguin'][fb('0x2f')] = Z;
                                this['updateList']();
                                return;
                            }
                            var a0 = this['findBy'](fb('0x24'), 'id', Y);a0['world'] = Z;
                            if (a0[fb('0x2f')] == this['myPenguin']['world']) {
                                this['updateList']();
                                this[fb('0x2b')](a0['id']);
                            }
                        }
                        break;
                }
            }
        }, {
            'key': 'sendFriendRequest',
            'value': function sendFriendRequest(a1) {
                this['verifyAPIContext']();
                this['sendData']('friendRequest', {
                    'id': a1
                });
            }
        }, {
            'key': 'sendUpdateWorld',
            'value': function sendUpdateWorld(a2) {
                this['verifyAPIContext']();
                var a3 = this['myPenguin']['id'];
                this['sendData']('updateWorld', {
                    'friend': a3,
                    'world': a2
                });
            }
        }, {
            'key': 'sendAddIgnore',
            'value': function sendAddIgnore(a4) {
                this['verifyAPIContext']();
                var a5 = this['protocolTypes']['friend'][fb('0x1e')]({
                    'id': a4
                });
                this['sendData']('addIgnore', {
                    'penguin': a5
                });
            }
        }, {
            'key': 'sendRemoveIgnore',
            'value': function sendRemoveIgnore(a6) {
                this['verifyAPIContext']();
                var a7 = this['protocolTypes'][fb('0xf')]['create']({
                    'id': a6
                });
                this['sendData'](fb('0x30'), {
                    'penguin': a7
                });
            }
        }, {
            'key': 'sendRemoveFriend',
            'value': function sendRemoveFriend(a8) {
                this['verifyAPIContext']();
                var a9 = this['protocolTypes']['friend']['create']({
                    'id': a8
                });
                this['sendData']('removeFriend', {
                    'friend': a9
                });
            }
        }, {
            'key': fb('0x31'),
            'value': function acceptRequest(aa) {
                this['verifyAPIContext']();
                var ab = this['protocolTypes']['friend']['create']({
                    'id': aa
                });
                this['sendData'](fb('0x32'), {
                    'friend': ab
                });
            }
        }, {
            'key': 'setupDrag',
            'value': function setupDrag() {
                var ac = this;
                var ad = document[fb('0x33')]('.friends');
                var ae = ![];
                var af = 0x0;
                var ag = 0x0;
                var ah = 0x0;
                var ai = 0x0;
                ad[fb('0x34')]('mousedown', function(aj) {
                    var ak = aj['target'][fb('0x35')]['toLowerCase']();
                    var al = aj['target'][fb('0x36')][fb('0x35')][fb('0x37')]();
                    if (ak == 'button' || ak == 'input' || al == 'button' || al == 'input') return;
                    ah = ad['offsetLeft'];
                    ai = ad['offsetTop'];
                    af = aj['pageX'];
                    ag = aj['pageY'];
                    ae = !![];
                });
                this['game']['addEventListener']('mousemove', function(am) {
                    if (!ae) return;
                    ad['style']['top'] = ai + (am['pageY'] - ag) + 'px';
                    ad['style']['left'] = ah + (am['pageX'] - af) + 'px';
                });
                this['game']['addEventListener']('mouseup', function() {
                    ae = ![];
                });
            }
        }, {
            'key': 'setupInput',
            'value': function setupInput() {
                var an = this;
                var ao = document['querySelector']('.friends__search-input');
                var ap = document[fb('0x33')]('.friends__search');
                ap['addEventListener']('submit', function(aq) {
                    aq['preventDefault']();
                });
                ao['addEventListener']('dragstart', function(ar) {
                    ar['preventDefault']();
                });
                ao['addEventListener'](fb('0x38'), function(as) {
                    as[fb('0x39')]();
                });
                ao['addEventListener'](fb('0x3a'), function() {
                    an['filterPenguins'](this['value']);
                });
                this['friendsContainer']['addEventListener']('contextmenu', function(at) {
                    at['preventDefault']();
                });
            }
        }, {
            'key': 'setupButtons',
            'value': function setupButtons() {
                var au = this;
                document['querySelector']('.friends__button--close')[fb('0x34')]('click', function() {
                    au['closeFriends']();
                });
                document['querySelector']('.friends__button--up')[fb('0x34')]('click', function() {
                    au['scrollList']('up');
                });
                document[fb('0x33')]('.friends__button--down')[fb('0x34')]('click', function() {
                    au['scrollList']('down');
                });
                document[fb('0x33')]('.friends__button--my')['addEventListener']('click', function() {
                    au['changeList'](au['STATE_BUDDIES']);
                });
                document[fb('0x33')](fb('0x3b'))['addEventListener'](fb('0x3c'), function() {
                    au['showHint']('Show\x20Buddies', au['getHintPosition'](this));
                });
                document['querySelector']('.friends__button--room')['addEventListener']('click', function() {
                    au[fb('0x3d')](au['STATE_ROOM']);
                });
                document['querySelector']('.friends__button--room')['addEventListener']('mouseenter', function() {
                    au['showHint'](fb('0x3e'), au['getHintPosition'](this));
                });
                document['querySelector']('.friends__button--ignored')[fb('0x34')](fb('0x3f'), function() {
                    au['changeList'](au['STATE_IGNORED']);
                });
                document[fb('0x33')]('.friends__button--ignored')['addEventListener']('mouseenter', function() {
                    au['showHint']('Show\x20Ignored', au['getHintPosition'](this));
                });
                document['querySelectorAll']('.friends__button')[fb('0x40')](function(av) {
                    av['addEventListener']('mouseleave', function() {
                        au['closeHint']();
                    });
                    av['addEventListener'](fb('0x3f'), function() {
                        au[fb('0x41')]();
                    });
                });
                document[fb('0x42')]('.friends')['forEach'](function(aw) {
                    aw['addEventListener']('mousemove', function(ax) {
                        if (!ax['target']['classList']['contains']('friends__button')) au['closeHint']();
                    });
                });
            }
        }, {
            'key': 'setupList',
            'value': function setupList() {
                var ay = this;
                var az = document['querySelectorAll'](fb('0x43'));
                az[fb('0x40')](function(aA) {
                    aA['addEventListener']('click', function() {
                        ay['showPlayercard'](this['dataset']['id']);
                    });
                });
            }
        }, {
            'key': 'changeList',
            'value': function changeList(aB) {
                var aC = 'friends__search--hide';
                var aD = 'friends__count--hide';
                var aE = document['querySelector']('.friends__count');
                var aF = document['querySelector'](fb('0x44'));
                var aG = document['querySelector']('.friends__title');
                var aH = aB !== this['STATE_BUDDIES'] ? 'add' : 'remove';
                aG['textContent'] = this[fb('0x9')][aB];
                aF['classList'][aH](aC);
                aE['classList'][aH](aD);
                this['currentList'] = aB;
                document['querySelector']('.friends__search-input')['value'] = '';
                this['listOffset'] = 0x0;
                this['searchResults'] = undefined;
                this['updateList']();
            }
        }, {
            'key': 'scrollList',
            'value': function scrollList(aI) {
                var aJ = this[fb('0x24')][fb('0x45')] - 0x8;
                if (this['searchResults'] !== undefined) {
                    aJ = this['searchResults']['length'] - 0x8;
                }
                if (this[fb('0x46')] >= 0x8 && aI == 'up') {
                    this[fb('0x46')] -= 0x8;
                } else if (this['listOffset'] <= aJ && aI == 'down') {
                    this['listOffset'] += 0x8;
                }
                this[fb('0x27')]();
                console[fb('0x2a')]('this.listOffset\x20=\x20' + this['listOffset'] + '\x20scrollLimit\x20=\x20' + aJ);
            }
        }, {
            'key': 'setListItem',
            'value': function setListItem(aK, aL, aM, aN, aO, aP) {
                var aQ = arguments[fb('0x45')] > 0x6 && arguments[0x6] !== undefined ? arguments[0x6] : ![];
                var aR = fb('0x47');
                var aS = 'friends__item--offline';
                var aT = 'friends__item--ignored';
                var aU = 'friends__item--empty';
                var aV = document['querySelectorAll']('.friends__item')[aK];
                var aW = aV['getElementsByClassName'](fb('0x48'))[0x0];
                var aX = aV['getElementsByClassName'](fb('0x49'))[0x0];
                var aY = aO ? 'add' : 'remove';
                var aZ = !aO ? fb('0x4a') : 'remove';
                var b0 = aQ ? fb('0x4a') : 'remove';
                var b1 = aP ? 'add' : 'remove';
                aV['classList'][b1](aU);
                aV['classList'][aZ](aS);
                aV['classList'][aY](aR);
                aV['classList'][b0](aT);
                aV['dataset']['swid'] = aM;
                aV[fb('0x4b')]['id'] = aL;
                aW['textContent'] = aN;
                aX['style']['backgroundImage'] = 'url(' + this['avatarUrl']['replace'](fb('0x4c'), aM) + ')';
                if (this['imgCache'][aM] == undefined) {
                    this['imgCache'][aM] = new Image();
                    this['imgCache'][aM][fb('0x25')] = this[fb('0x4d')]['replace']('%swid%', aM);
                }
            }
        }, {
            'key': 'updateFriendsList',
            'value': function updateFriendsList() {
                var b2 = this;
                sort['js'](this['friends'])['by']([{
                    'desc': function desc(b3) {
                        return Number(b3['world'] == b2['myPenguin'][fb('0x2f')]);
                    }
                }, {
                    'asc': function asc(b4) {
                        return b4['name']['toLowerCase']();
                    }
                }]);
                var b5 = 0x0;
                if (this['searchResults'] !== undefined) {
                    this['setFriendsCount'](this['searchResults']['length'], this['friends']['length']);
                } else {
                    this['setFriendsCount'](this['friends']['length'], 0x1f4);
                }
                for (var b6 = this['listOffset']; b6 < this['listOffset'] + 0x8; b6++) {
                    var b7 = this['friends'][b6];
                    if (this['searchResults'] !== undefined) {
                        b7 = this[fb('0x4e')][b6];
                    }
                    if (b7 !== undefined) {
                        this['setListItem'](b5, b7['id'], b7[fb('0x4f')], b7['name'], b7[fb('0x2f')] == this['myPenguin']['world']);
                    } else {
                        this['setListItem'](b5, 0x0, '', '', ![], !![]);
                    }
                    b5++;
                }
            }
        }, {
            'key': 'updateIgnoreList',
            'value': function updateIgnoreList() {
                console['ignored']('updateIgnoreList');
                sort['js'](this['ignored'])['by']([{
                    'asc': function asc(b8) {
                        return b8['name'][fb('0x37')]();
                    }
                }]);
                var b9 = 0x0;
                for (var ba = this['listOffset']; ba < this['listOffset'] + 0x8; ba++) {
                    var bb = this['ignored'][ba];
                    if (bb !== undefined) {
                        this['setListItem'](b9, bb['id'], bb['swid'], bb['name'], !![], ![], !![]);
                    } else {
                        this[fb('0x50')](b9, 0x0, '', '', ![], !![]);
                    }
                    b9++;
                }
            }
        }, {
            'key': 'updateRoomList',
            'value': function updateRoomList() {
                var bc = this;
                sort['js'](this['room'])['by']([{
                    'desc': function desc(bd) {
                        return Number(bd['world'] == bc['myPenguin']['world']);
                    }
                }, {
                    'asc': function asc(be) {
                        return be['name']['toLowerCase']();
                    }
                }]);
                var bf = 0x0;
                for (var bg = this['listOffset']; bg < this['listOffset'] + 0x8; bg++) {
                    var bh = this['room'][bg];
                    if (bh !== undefined) {
                        this['setListItem'](bf, bh['id'], bh['swid'], bh['name'], bh['world'] == this['myPenguin']['world']);
                    } else {
                        this['setListItem'](bf, 0x0, '', '', ![], !![]);
                    }
                    bf++;
                }
            }
        }, {
            'key': 'setAPIContext',
            'value': function setAPIContext() {
                var bi = '';
                try {
                    throw new Error(fb('0x51'));
                } catch (bj) {
                    bi = bj[fb('0x52')];
                }
                var bk = bi['substr'](bi['indexOf']('anonymous'), 0xf);
                this['apiContext'] = bk;
            }
        }, {
            'key': 'verifyAPIContext',
            'value': function verifyAPIContext() {
                if (![] == !![]) {
                    var bl = '';
                    try {
                        throw new Error('context');
                    } catch (bm) {
                        bl = bm['stack'];
                    }
                    var bn = bl['substr'](bl[fb('0x53')]('anonymous'), 0xf);
                    if (bn !== this['apiContext']) {
                        this[fb('0x16')]('error', {
                            'id': 0x1,
                            'message': 'Invalid\x20API\x20Context'
                        });
                        throw new Error(fb('0x54'));
                    }
                }
            }
        }, {
            'key': 'setRoomList',
            'value': function setRoomList(bo) {
                this['verifyAPIContext']();
                var bp = this;
                this['room'] = [];
                bo['forEach'](function(bq) {
                    var br = {};
                    br['id'] = bq.data[0x0];
                    br['swid'] = bq.data[0x13];
                    br['name'] = bq.nickname;
                    br['world'] = bp.myPenguin.world;
                    bp['room'][fb('0x2d')](br);
                });
                this['updateList']();
            }
        }, {
            'key': 'updatePlayerWidget',
            'value': function updatePlayerWidget() {
                var bs = document[fb('0x55')]('game__base\x20game__base--loaded')[0x0];
                bs['updatePlayerWidget']();
            }
        }, {
            'key': 'changeRoomList',
            'value': function changeRoomList(bt) {
                var bu = arguments[fb('0x45')] > 0x1 && arguments[0x1] !== undefined ? arguments[0x1] : ![];
                this['verifyAPIContext']();
                var bv = this;
                if (!bu) {
                    var bw = {};
                    bw['id'] = bt.data[0x0];
                    bw['swid'] = bt.data[0x13];
                    bw['name'] = bt.nickname;
                    bw['world'] = bv.myPenguin.world;
                    this['room'][fb('0x2d')](bw);
                } else {
                    var bx = this['findIndexBy']('room', 'id', bt);
                    if (bx !== -0x1) {
                        this[fb('0x56')][fb('0x57')](bx, 0x1);
                    }
                }
                if (this['currentList'] == this['STATE_ROOM']) {
                    this['updateList']();
                }
            }
        }, {
            'key': 'updateList',
            'value': function updateList() {
                switch (this['currentList']) {
                    case this['STATE_BUDDIES']:
                        this['updateFriendsList']();
                        this['updatePlayerWidget']();
                        break;
                    case this['STATE_IGNORED']:
                        this['updateIgnoreList']();
                        this['updatePlayerWidget']();
                        break;
                    case this['STATE_ROOM']:
                        this[fb('0x58')]();
                        break;
                }
            }
        }, {
            'key': 'filterPenguins',
            'value': function filterPenguins(by) {
                this['listOffset'] = 0x0;
                if (by == '' || by == undefined) {
                    this[fb('0x4e')] = undefined;
                    this['updateList']();
                    return;
                }
                this['searchResults'] = this[fb('0x24')]['filter'](function(bz) {
                    return bz['name']['toLowerCase']()[fb('0x59')](by);
                });
                this['updateList']();
            }
        }, {
            'key': 'setFriendsCount',
            'value': function setFriendsCount(bA, bB) {
                document['querySelector']('.friends__count-number')['textContent'] = bA;
                document['querySelector']('.friends__count-total')['textContent'] = bB;
            }
        }, {
            'key': 'handleFriendRequest',
            'value': function handleFriendRequest(bC) {
                this[fb('0x5')]['push']({
                    'id': bC['id'],
                    'swid': bC['swid'],
                    'name': bC['name']
                });
                var bD = document['getElementsByClassName'](fb('0x5a'))[0x0];
                bD['updateBuddyRequestIcon'](this['friendRequests']);
                console[fb('0x2a')]('Handle\x20friend\x20req', bC);
            }
        }, {
            'key': 'findBy',
            'value': function findBy(bE, bF, bG) {
                var bH = this[bE][fb('0x5b')](function(bI) {
                    if (bI[bF] == bG) {
                        return !![];
                    }
                });
                return bH;
            }
        }, {
            'key': 'findIndexBy',
            'value': function findIndexBy(bJ, bK, bL) {
                var bM = this[bJ]['findIndex'](function(bN) {
                    if (bN[bK] == bL) {
                        return !![];
                    }
                });
                return bM;
            }
        }, {
            'key': 'updateFriendRequest',
            'value': function updateFriendRequest(bO, bP) {
                if (bP) {
                    this[fb('0x31')](bO['id']);
                }
                var bQ = this['findIndexBy']('friendRequests', 'id', bO['id']);
                this['friendRequests']['slice'](bQ, 0x1);
                console['ignored']('updateFriendRequest', bO, bP);
            }
        }, {
            'key': 'showPlayercard',
            'value': function showPlayercard(bR) {
                var bS = document['getElementsByClassName']('game__base\x20game__base--loaded')[0x0];
                if (this['findIndexBy']('ignored', 'id', bR) !== -0x1) {
                    bS[fb('0x5c')](bR);
                } else {
                    bS['showPlayercard'](bR, undefined);
                }
                console['ignored']('Show\x20playercard\x20for\x20user', bR);
            }
        }, {
            'key': 'showOnlineHint',
            'value': function showOnlineHint(bT) {
                var bU = document['getElementsByClassName']('game__base\x20game__base--loaded')[0x0];
                bU[fb('0x2b')](bT);
                console['ignored'](fb('0x5d'), bT);
            }
        }, {
            'key': 'showHint',
            'value': function showHint(bV, bW) {
                var bX = this;
                var bY = document['querySelector']('.hint__text');
                bY['textContent'] = bV;
                this['hint'][fb('0x5e')]['left'] = bW['x'] + 'px';
                this['hint']['style']['top'] = bW['y'] + 'px';
                setTimeout(function() {
                    bX['hint']['classList'][fb('0x4a')]('hint--show');
                }, 0x96);
            }
        }, {
            'key': 'closeHint',
            'value': function closeHint() {
                this['hint']['classList']['remove'](fb('0x5f'));
            }
        }, {
            'key': 'getHintPosition',
            'value': function getHintPosition(bZ) {
                var c0 = bZ[fb('0x60')]();
                return {
                    'x': bZ['offsetLeft'] - bZ['offsetWidth'] / 0x2 - 0x2d,
                    'y': bZ['offsetTop'] - (bZ['offsetHeight'] - 0xa)
                };
            }
        }, {
            'key': 'showFriends',
            'value': function showFriends() {
                var c1 = arguments['length'] > 0x0 && arguments[0x0] !== undefined ? arguments[0x0] : !![];
                if (c1) {
                    this['changeList'](this['STATE_BUDDIES']);
                }
                this['friendsContainer']['classList']['add']('content__friends--show');
            }
        }, {
            'key': 'showFriendsAPI',
            'value': function showFriendsAPI() {
                var c2 = arguments[fb('0x45')] > 0x0 && arguments[0x0] !== undefined ? arguments[0x0] : !![];
                this[fb('0x1c')]();
                if (c2) {
                    this['changeList'](this[fb('0x61')]);
                }
                this[fb('0xb')]['classList']['add'](fb('0x62'));
            }
        }, {
            'key': 'isListShowing',
            'value': function isListShowing() {
                this['verifyAPIContext']();
                return this['friendsContainer']['classList']['contains']('content__friends--show');
            }
        }, {
            'key': 'closeFriends',
            'value': function closeFriends() {
                this['friendsContainer'][fb('0x63')][fb('0x64')]('content__friends--show');
            }
        }, {
            'key': 'closeFriendsAPI',
            'value': function closeFriendsAPI() {
                this['verifyAPIContext']();
                this['friendsContainer']['classList']['remove']('content__friends--show');
            }
        }, {
            'key': 'handleShellError',
            'value': function handleShellError(c3, c4) {
                console['warn']('received\x20shell\x20error', c3, c4);
            }
        }, {
            'key': fb('0x65'),
            'value': function handleAirtowerDisconnect(c5) {
                this['shouldReconnect'] = ![];
                this['socket'][fb('0x66')]();
                if (c5) {
                    console[fb('0x2a')](fb('0x67'));
                } else {
                    console['ignored']('airtower\x20lost\x20connection,\x20not\x20intentional');
                }
            }
        }]);
        return l;
    }();
    var c6 = new l();
    friendAPI['closeFriends'] = c6['closeFriendsAPI'][fb('0x14')](c6);
    friendAPI[fb('0x68')] = c6['showFriendsAPI']['bind'](c6);
    friendAPI[fb('0x69')] = c6['setRoomList']['bind'](c6);
    friendAPI['changeRoomList'] = c6['changeRoomList']['bind'](c6);
    friendAPI['isPenguinMyFriend'] = c6['isPenguinMyFriend']['bind'](c6);
    friendAPI['isFriendOnline'] = c6['isFriendOnline']['bind'](c6);
    friendAPI[fb('0x6a')] = c6['isListShowing']['bind'](c6);
    friendAPI['getFriendName'] = c6['getFriendName'][fb('0x14')](c6);
    friendAPI['sendUpdateWorld'] = c6['sendUpdateWorld']['bind'](c6);
    friendAPI['sendAuthenticate'] = c6['sendAuthenticate']['bind'](c6);
    friendAPI[fb('0x6b')] = c6['sendAddIgnore'][fb('0x14')](c6);
    friendAPI['sendRemoveIgnore'] = c6['sendRemoveIgnore']['bind'](c6);
    friendAPI['sendFriendRequest'] = c6['sendFriendRequest']['bind'](c6);
    friendAPI[fb('0x6c')] = c6['updateFriendRequest']['bind'](c6);
    friendAPI['sendRemoveFriend'] = c6['sendRemoveFriend']['bind'](c6);
    friendAPI['handleShellError'] = c6['handleShellError']['bind'](c6);
    friendAPI['handleAirtowerDisconnect'] = c6['handleAirtowerDisconnect']['bind'](c6);
    Object['freeze'](friendAPI);
}();